// tslint:disable
/**
 * HouseHold
 * HouseHold API
 *
 * The version of the OpenAPI document: 0.0.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    product?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    location?: string;
}
/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     *
     * @type {number}
     * @memberof InlineObject1
     */
    quantity?: number;
}
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     *
     * @type {number}
     * @memberof InlineObject2
     */
    quantity?: number;
    /**
     * YYYY-MM-DD date or null, if product is set not expiring.
     * @type {string}
     * @memberof InlineObject2
     */
    bestBefore?: string | null;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {Array<ProductCategoryjsonld>}
     * @memberof InlineResponse200
     */
    hydramember: Array<ProductCategoryjsonld>;
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    hydratotalItems?: number;
    /**
     *
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse200
     */
    hydraview?: InlineResponse200HydraView;
    /**
     *
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse200
     */
    hydrasearch?: InlineResponse200HydraSearch;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {Array<ProductCollectionjsonld>}
     * @memberof InlineResponse2001
     */
    hydramember: Array<ProductCollectionjsonld>;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2001
     */
    hydratotalItems?: number;
    /**
     *
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse2001
     */
    hydraview?: InlineResponse200HydraView;
    /**
     *
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse2001
     */
    hydrasearch?: InlineResponse200HydraSearch;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {Array<ProductLocationjsonld>}
     * @memberof InlineResponse2002
     */
    hydramember: Array<ProductLocationjsonld>;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002
     */
    hydratotalItems?: number;
    /**
     *
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse2002
     */
    hydraview?: InlineResponse200HydraView;
    /**
     *
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse2002
     */
    hydrasearch?: InlineResponse200HydraSearch;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     *
     * @type {Array<ProductStockjsonld>}
     * @memberof InlineResponse2003
     */
    hydramember: Array<ProductStockjsonld>;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    hydratotalItems?: number;
    /**
     *
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse2003
     */
    hydraview?: InlineResponse200HydraView;
    /**
     *
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse2003
     */
    hydrasearch?: InlineResponse200HydraSearch;
}
/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     *
     * @type {Array<Productjsonld>}
     * @memberof InlineResponse2004
     */
    hydramember: Array<Productjsonld>;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2004
     */
    hydratotalItems?: number;
    /**
     *
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse2004
     */
    hydraview?: InlineResponse200HydraView;
    /**
     *
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse2004
     */
    hydrasearch?: InlineResponse200HydraSearch;
}
/**
 *
 * @export
 * @interface InlineResponse200HydraSearch
 */
export interface InlineResponse200HydraSearch {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraSearch
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraSearch
     */
    hydratemplate?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraSearch
     */
    hydravariableRepresentation?: string;
    /**
     *
     * @type {Array<InlineResponse200HydraSearchHydraMapping>}
     * @memberof InlineResponse200HydraSearch
     */
    hydramapping?: Array<InlineResponse200HydraSearchHydraMapping>;
}
/**
 *
 * @export
 * @interface InlineResponse200HydraSearchHydraMapping
 */
export interface InlineResponse200HydraSearchHydraMapping {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    variable?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    property?: string;
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    required?: boolean;
}
/**
 *
 * @export
 * @interface InlineResponse200HydraView
 */
export interface InlineResponse200HydraView {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    hydrafirst?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    hydralast?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    hydranext?: string;
}
/**
 *
 * @export
 * @interface Product
 */
export interface Product {
    /**
     *
     * @type {string}
     * @memberof Product
     */
    name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Product
     */
    ean?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof Product
     */
    price?: number;
    /**
     *
     * @type {boolean}
     * @memberof Product
     */
    expiring?: boolean;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    collection?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Product
     */
    stocks?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ProductCategory
 */
export interface ProductCategory {
    /**
     *
     * @type {string}
     * @memberof ProductCategory
     */
    name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductCategory
     */
    collections?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ProductCategory
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ProductCategoryjsonld
 */
export interface ProductCategoryjsonld {
    /**
     *
     * @type {string}
     * @memberof ProductCategoryjsonld
     */
    context?: string;
    /**
     *
     * @type {string}
     * @memberof ProductCategoryjsonld
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductCategoryjsonld
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ProductCategoryjsonld
     */
    name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductCategoryjsonld
     */
    collections?: Array<string>;
}
/**
 *
 * @export
 * @interface ProductCollection
 */
export interface ProductCollection {
    /**
     *
     * @type {string}
     * @memberof ProductCollection
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ProductCollection
     */
    category?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductCollection
     */
    products?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ProductCollection
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ProductCollectionjsonld
 */
export interface ProductCollectionjsonld {
    /**
     *
     * @type {string}
     * @memberof ProductCollectionjsonld
     */
    context?: string;
    /**
     *
     * @type {string}
     * @memberof ProductCollectionjsonld
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductCollectionjsonld
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ProductCollectionjsonld
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ProductCollectionjsonld
     */
    category?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductCollectionjsonld
     */
    products?: Array<string>;
}
/**
 *
 * @export
 * @interface ProductLocation
 */
export interface ProductLocation {
    /**
     *
     * @type {string}
     * @memberof ProductLocation
     */
    name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductLocation
     */
    stocks?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ProductLocation
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ProductLocationjsonld
 */
export interface ProductLocationjsonld {
    /**
     *
     * @type {string}
     * @memberof ProductLocationjsonld
     */
    context?: string;
    /**
     *
     * @type {string}
     * @memberof ProductLocationjsonld
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ProductLocationjsonld
     */
    name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductLocationjsonld
     */
    stocks?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ProductLocationjsonld
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ProductStock
 */
export interface ProductStock {
    /**
     *
     * @type {string}
     * @memberof ProductStock
     */
    product?: string;
    /**
     *
     * @type {string}
     * @memberof ProductStock
     */
    location?: string;
    /**
     * Quantity of products in stock. Cannot be updated directly.
     * @type {number}
     * @memberof ProductStock
     */
    quantity?: number;
    /**
     * Array in format where first YYYY-MM-DD and then quantity products on that date
     * @type {{ [key: string]: string; }}
     * @memberof ProductStock
     */
    bestBefore?: { [key: string]: string; };
    /**
     *
     * @type {string}
     * @memberof ProductStock
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ProductStockAdd
 */
export interface ProductStockAdd {
    /**
     * Quantity of products in stock. Cannot be updated directly.
     * @type {number}
     * @memberof ProductStockAdd
     */
    quantity?: number;
}
/**
 *
 * @export
 * @interface ProductStockjsonld
 */
export interface ProductStockjsonld {
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonld
     */
    context?: string;
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonld
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonld
     */
    product?: string;
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonld
     */
    location?: string;
    /**
     * Quantity of products in stock. Cannot be updated directly.
     * @type {number}
     * @memberof ProductStockjsonld
     */
    quantity?: number;
    /**
     * Array in format where first YYYY-MM-DD and then quantity products on that date
     * @type {{ [key: string]: string; }}
     * @memberof ProductStockjsonld
     */
    bestBefore?: { [key: string]: string; };
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonld
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ProductStockjsonldAdd
 */
export interface ProductStockjsonldAdd {
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonldAdd
     */
    context?: string;
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonldAdd
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonldAdd
     */
    type?: string;
    /**
     * Quantity of products in stock. Cannot be updated directly.
     * @type {number}
     * @memberof ProductStockjsonldAdd
     */
    quantity?: number;
}
/**
 *
 * @export
 * @interface ProductStockjsonldConsume
 */
export interface ProductStockjsonldConsume {
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonldConsume
     */
    context?: string;
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonldConsume
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductStockjsonldConsume
     */
    type?: string;
}
/**
 *
 * @export
 * @interface Productjsonld
 */
export interface Productjsonld {
    /**
     *
     * @type {string}
     * @memberof Productjsonld
     */
    context?: string;
    /**
     *
     * @type {string}
     * @memberof Productjsonld
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof Productjsonld
     */
    name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Productjsonld
     */
    ean?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof Productjsonld
     */
    price?: number;
    /**
     *
     * @type {boolean}
     * @memberof Productjsonld
     */
    expiring?: boolean;
    /**
     *
     * @type {string}
     * @memberof Productjsonld
     */
    collection?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Productjsonld
     */
    stocks?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Productjsonld
     */
    id?: string;
}

/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Removes the Product resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProductItem.');
            }
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves the collection of Product resources.
         * @param {string} [name]
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCollection(name?: string, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves a Product resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductItem.');
            }
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates the Product resource.
         * @param {string} id
         * @param {Product} [product] The updated Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductItem(id: string, product?: Product, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchProductItem.');
            }
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof product !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(product !== undefined ? product : {}) : (product || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a Product resource.
         * @param {Productjsonld} [productjsonld] The new Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCollection(productjsonld?: Productjsonld, options: any = {}): RequestArgs {
            const localVarPath = `/api/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productjsonld !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productjsonld !== undefined ? productjsonld : {}) : (productjsonld || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replaces the Product resource.
         * @param {string} id
         * @param {Productjsonld} [productjsonld] The updated Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductItem(id: string, productjsonld?: Productjsonld, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putProductItem.');
            }
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productjsonld !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productjsonld !== undefined ? productjsonld : {}) : (productjsonld || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Removes the Product resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).deleteProductItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves the collection of Product resources.
         * @param {string} [name]
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCollection(name?: string, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).getProductCollection(name, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves a Product resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Productjsonld> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).getProductItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Updates the Product resource.
         * @param {string} id
         * @param {Product} [product] The updated Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductItem(id: string, product?: Product, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Productjsonld> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).patchProductItem(id, product, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Creates a Product resource.
         * @param {Productjsonld} [productjsonld] The new Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCollection(productjsonld?: Productjsonld, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Productjsonld> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).postProductCollection(productjsonld, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Replaces the Product resource.
         * @param {string} id
         * @param {Productjsonld} [productjsonld] The updated Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductItem(id: string, productjsonld?: Productjsonld, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Productjsonld> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).putProductItem(id, productjsonld, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Removes the Product resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductItem(id: string, options?: any) {
            return ProductApiFp(configuration).deleteProductItem(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Retrieves the collection of Product resources.
         * @param {string} [name]
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCollection(name?: string, page?: number, options?: any) {
            return ProductApiFp(configuration).getProductCollection(name, page, options)(axios, basePath);
        },
        /**
         *
         * @summary Retrieves a Product resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItem(id: string, options?: any) {
            return ProductApiFp(configuration).getProductItem(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Updates the Product resource.
         * @param {string} id
         * @param {Product} [product] The updated Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductItem(id: string, product?: Product, options?: any) {
            return ProductApiFp(configuration).patchProductItem(id, product, options)(axios, basePath);
        },
        /**
         *
         * @summary Creates a Product resource.
         * @param {Productjsonld} [productjsonld] The new Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCollection(productjsonld?: Productjsonld, options?: any) {
            return ProductApiFp(configuration).postProductCollection(productjsonld, options)(axios, basePath);
        },
        /**
         *
         * @summary Replaces the Product resource.
         * @param {string} id
         * @param {Productjsonld} [productjsonld] The updated Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductItem(id: string, productjsonld?: Productjsonld, options?: any) {
            return ProductApiFp(configuration).putProductItem(id, productjsonld, options)(axios, basePath);
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     *
     * @summary Removes the Product resource.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public deleteProductItem(id: string, options?: any) {
        return ProductApiFp(this.configuration).deleteProductItem(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Retrieves the collection of Product resources.
     * @param {string} [name]
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductCollection(name?: string, page?: number, options?: any) {
        return ProductApiFp(this.configuration).getProductCollection(name, page, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Retrieves a Product resource.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductItem(id: string, options?: any) {
        return ProductApiFp(this.configuration).getProductItem(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Updates the Product resource.
     * @param {string} id
     * @param {Product} [product] The updated Product resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public patchProductItem(id: string, product?: Product, options?: any) {
        return ProductApiFp(this.configuration).patchProductItem(id, product, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Creates a Product resource.
     * @param {Productjsonld} [productjsonld] The new Product resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public postProductCollection(productjsonld?: Productjsonld, options?: any) {
        return ProductApiFp(this.configuration).postProductCollection(productjsonld, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Replaces the Product resource.
     * @param {string} id
     * @param {Productjsonld} [productjsonld] The updated Product resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public putProductItem(id: string, productjsonld?: Productjsonld, options?: any) {
        return ProductApiFp(this.configuration).putProductItem(id, productjsonld, options)(this.axios, this.basePath);
    }

}


/**
 * ProductCategoryApi - axios parameter creator
 * @export
 */
export const ProductCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Removes the ProductCategory resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductCategoryItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProductCategoryItem.');
            }
            const localVarPath = `/api/product/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves the collection of ProductCategory resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoryCollection(page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/product/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves a ProductCategory resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoryItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductCategoryItem.');
            }
            const localVarPath = `/api/product/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates the ProductCategory resource.
         * @param {string} id
         * @param {ProductCategory} [productCategory] The updated ProductCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductCategoryItem(id: string, productCategory?: ProductCategory, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchProductCategoryItem.');
            }
            const localVarPath = `/api/product/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productCategory !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productCategory !== undefined ? productCategory : {}) : (productCategory || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a ProductCategory resource.
         * @param {ProductCategoryjsonld} [productCategoryjsonld] The new ProductCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCategoryCollection(productCategoryjsonld?: ProductCategoryjsonld, options: any = {}): RequestArgs {
            const localVarPath = `/api/product/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productCategoryjsonld !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productCategoryjsonld !== undefined ? productCategoryjsonld : {}) : (productCategoryjsonld || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replaces the ProductCategory resource.
         * @param {string} id
         * @param {ProductCategoryjsonld} [productCategoryjsonld] The updated ProductCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductCategoryItem(id: string, productCategoryjsonld?: ProductCategoryjsonld, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putProductCategoryItem.');
            }
            const localVarPath = `/api/product/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productCategoryjsonld !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productCategoryjsonld !== undefined ? productCategoryjsonld : {}) : (productCategoryjsonld || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductCategoryApi - functional programming interface
 * @export
 */
export const ProductCategoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Removes the ProductCategory resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductCategoryItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProductCategoryApiAxiosParamCreator(configuration).deleteProductCategoryItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves the collection of ProductCategory resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoryCollection(page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = ProductCategoryApiAxiosParamCreator(configuration).getProductCategoryCollection(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves a ProductCategory resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoryItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategoryjsonld> {
            const localVarAxiosArgs = ProductCategoryApiAxiosParamCreator(configuration).getProductCategoryItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Updates the ProductCategory resource.
         * @param {string} id
         * @param {ProductCategory} [productCategory] The updated ProductCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductCategoryItem(id: string, productCategory?: ProductCategory, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategoryjsonld> {
            const localVarAxiosArgs = ProductCategoryApiAxiosParamCreator(configuration).patchProductCategoryItem(id, productCategory, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Creates a ProductCategory resource.
         * @param {ProductCategoryjsonld} [productCategoryjsonld] The new ProductCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCategoryCollection(productCategoryjsonld?: ProductCategoryjsonld, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategoryjsonld> {
            const localVarAxiosArgs = ProductCategoryApiAxiosParamCreator(configuration).postProductCategoryCollection(productCategoryjsonld, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Replaces the ProductCategory resource.
         * @param {string} id
         * @param {ProductCategoryjsonld} [productCategoryjsonld] The updated ProductCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductCategoryItem(id: string, productCategoryjsonld?: ProductCategoryjsonld, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategoryjsonld> {
            const localVarAxiosArgs = ProductCategoryApiAxiosParamCreator(configuration).putProductCategoryItem(id, productCategoryjsonld, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductCategoryApi - factory interface
 * @export
 */
export const ProductCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Removes the ProductCategory resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductCategoryItem(id: string, options?: any) {
            return ProductCategoryApiFp(configuration).deleteProductCategoryItem(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Retrieves the collection of ProductCategory resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoryCollection(page?: number, options?: any) {
            return ProductCategoryApiFp(configuration).getProductCategoryCollection(page, options)(axios, basePath);
        },
        /**
         *
         * @summary Retrieves a ProductCategory resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoryItem(id: string, options?: any) {
            return ProductCategoryApiFp(configuration).getProductCategoryItem(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Updates the ProductCategory resource.
         * @param {string} id
         * @param {ProductCategory} [productCategory] The updated ProductCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductCategoryItem(id: string, productCategory?: ProductCategory, options?: any) {
            return ProductCategoryApiFp(configuration).patchProductCategoryItem(id, productCategory, options)(axios, basePath);
        },
        /**
         *
         * @summary Creates a ProductCategory resource.
         * @param {ProductCategoryjsonld} [productCategoryjsonld] The new ProductCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCategoryCollection(productCategoryjsonld?: ProductCategoryjsonld, options?: any) {
            return ProductCategoryApiFp(configuration).postProductCategoryCollection(productCategoryjsonld, options)(axios, basePath);
        },
        /**
         *
         * @summary Replaces the ProductCategory resource.
         * @param {string} id
         * @param {ProductCategoryjsonld} [productCategoryjsonld] The updated ProductCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductCategoryItem(id: string, productCategoryjsonld?: ProductCategoryjsonld, options?: any) {
            return ProductCategoryApiFp(configuration).putProductCategoryItem(id, productCategoryjsonld, options)(axios, basePath);
        },
    };
};

/**
 * ProductCategoryApi - object-oriented interface
 * @export
 * @class ProductCategoryApi
 * @extends {BaseAPI}
 */
export class ProductCategoryApi extends BaseAPI {
    /**
     *
     * @summary Removes the ProductCategory resource.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public deleteProductCategoryItem(id: string, options?: any) {
        return ProductCategoryApiFp(this.configuration).deleteProductCategoryItem(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Retrieves the collection of ProductCategory resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public getProductCategoryCollection(page?: number, options?: any) {
        return ProductCategoryApiFp(this.configuration).getProductCategoryCollection(page, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Retrieves a ProductCategory resource.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public getProductCategoryItem(id: string, options?: any) {
        return ProductCategoryApiFp(this.configuration).getProductCategoryItem(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Updates the ProductCategory resource.
     * @param {string} id
     * @param {ProductCategory} [productCategory] The updated ProductCategory resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public patchProductCategoryItem(id: string, productCategory?: ProductCategory, options?: any) {
        return ProductCategoryApiFp(this.configuration).patchProductCategoryItem(id, productCategory, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Creates a ProductCategory resource.
     * @param {ProductCategoryjsonld} [productCategoryjsonld] The new ProductCategory resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public postProductCategoryCollection(productCategoryjsonld?: ProductCategoryjsonld, options?: any) {
        return ProductCategoryApiFp(this.configuration).postProductCategoryCollection(productCategoryjsonld, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Replaces the ProductCategory resource.
     * @param {string} id
     * @param {ProductCategoryjsonld} [productCategoryjsonld] The updated ProductCategory resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public putProductCategoryItem(id: string, productCategoryjsonld?: ProductCategoryjsonld, options?: any) {
        return ProductCategoryApiFp(this.configuration).putProductCategoryItem(id, productCategoryjsonld, options)(this.axios, this.basePath);
    }

}


/**
 * ProductCollectionApi - axios parameter creator
 * @export
 */
export const ProductCollectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Removes the ProductCollection resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductCollectionItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProductCollectionItem.');
            }
            const localVarPath = `/api/product/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves the collection of ProductCollection resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCollectionCollection(page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/product/collections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves a ProductCollection resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCollectionItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductCollectionItem.');
            }
            const localVarPath = `/api/product/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates the ProductCollection resource.
         * @param {string} id
         * @param {ProductCollection} [productCollection] The updated ProductCollection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductCollectionItem(id: string, productCollection?: ProductCollection, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchProductCollectionItem.');
            }
            const localVarPath = `/api/product/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productCollection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productCollection !== undefined ? productCollection : {}) : (productCollection || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a ProductCollection resource.
         * @param {ProductCollectionjsonld} [productCollectionjsonld] The new ProductCollection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCollectionCollection(productCollectionjsonld?: ProductCollectionjsonld, options: any = {}): RequestArgs {
            const localVarPath = `/api/product/collections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productCollectionjsonld !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productCollectionjsonld !== undefined ? productCollectionjsonld : {}) : (productCollectionjsonld || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replaces the ProductCollection resource.
         * @param {string} id
         * @param {ProductCollectionjsonld} [productCollectionjsonld] The updated ProductCollection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductCollectionItem(id: string, productCollectionjsonld?: ProductCollectionjsonld, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putProductCollectionItem.');
            }
            const localVarPath = `/api/product/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productCollectionjsonld !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productCollectionjsonld !== undefined ? productCollectionjsonld : {}) : (productCollectionjsonld || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductCollectionApi - functional programming interface
 * @export
 */
export const ProductCollectionApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Removes the ProductCollection resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductCollectionItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProductCollectionApiAxiosParamCreator(configuration).deleteProductCollectionItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves the collection of ProductCollection resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCollectionCollection(page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = ProductCollectionApiAxiosParamCreator(configuration).getProductCollectionCollection(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves a ProductCollection resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCollectionItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCollectionjsonld> {
            const localVarAxiosArgs = ProductCollectionApiAxiosParamCreator(configuration).getProductCollectionItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Updates the ProductCollection resource.
         * @param {string} id
         * @param {ProductCollection} [productCollection] The updated ProductCollection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductCollectionItem(id: string, productCollection?: ProductCollection, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCollectionjsonld> {
            const localVarAxiosArgs = ProductCollectionApiAxiosParamCreator(configuration).patchProductCollectionItem(id, productCollection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Creates a ProductCollection resource.
         * @param {ProductCollectionjsonld} [productCollectionjsonld] The new ProductCollection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCollectionCollection(productCollectionjsonld?: ProductCollectionjsonld, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCollectionjsonld> {
            const localVarAxiosArgs = ProductCollectionApiAxiosParamCreator(configuration).postProductCollectionCollection(productCollectionjsonld, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Replaces the ProductCollection resource.
         * @param {string} id
         * @param {ProductCollectionjsonld} [productCollectionjsonld] The updated ProductCollection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductCollectionItem(id: string, productCollectionjsonld?: ProductCollectionjsonld, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCollectionjsonld> {
            const localVarAxiosArgs = ProductCollectionApiAxiosParamCreator(configuration).putProductCollectionItem(id, productCollectionjsonld, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductCollectionApi - factory interface
 * @export
 */
export const ProductCollectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Removes the ProductCollection resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductCollectionItem(id: string, options?: any) {
            return ProductCollectionApiFp(configuration).deleteProductCollectionItem(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Retrieves the collection of ProductCollection resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCollectionCollection(page?: number, options?: any) {
            return ProductCollectionApiFp(configuration).getProductCollectionCollection(page, options)(axios, basePath);
        },
        /**
         *
         * @summary Retrieves a ProductCollection resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCollectionItem(id: string, options?: any) {
            return ProductCollectionApiFp(configuration).getProductCollectionItem(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Updates the ProductCollection resource.
         * @param {string} id
         * @param {ProductCollection} [productCollection] The updated ProductCollection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductCollectionItem(id: string, productCollection?: ProductCollection, options?: any) {
            return ProductCollectionApiFp(configuration).patchProductCollectionItem(id, productCollection, options)(axios, basePath);
        },
        /**
         *
         * @summary Creates a ProductCollection resource.
         * @param {ProductCollectionjsonld} [productCollectionjsonld] The new ProductCollection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCollectionCollection(productCollectionjsonld?: ProductCollectionjsonld, options?: any) {
            return ProductCollectionApiFp(configuration).postProductCollectionCollection(productCollectionjsonld, options)(axios, basePath);
        },
        /**
         *
         * @summary Replaces the ProductCollection resource.
         * @param {string} id
         * @param {ProductCollectionjsonld} [productCollectionjsonld] The updated ProductCollection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductCollectionItem(id: string, productCollectionjsonld?: ProductCollectionjsonld, options?: any) {
            return ProductCollectionApiFp(configuration).putProductCollectionItem(id, productCollectionjsonld, options)(axios, basePath);
        },
    };
};

/**
 * ProductCollectionApi - object-oriented interface
 * @export
 * @class ProductCollectionApi
 * @extends {BaseAPI}
 */
export class ProductCollectionApi extends BaseAPI {
    /**
     *
     * @summary Removes the ProductCollection resource.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public deleteProductCollectionItem(id: string, options?: any) {
        return ProductCollectionApiFp(this.configuration).deleteProductCollectionItem(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Retrieves the collection of ProductCollection resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public getProductCollectionCollection(page?: number, options?: any) {
        return ProductCollectionApiFp(this.configuration).getProductCollectionCollection(page, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Retrieves a ProductCollection resource.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public getProductCollectionItem(id: string, options?: any) {
        return ProductCollectionApiFp(this.configuration).getProductCollectionItem(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Updates the ProductCollection resource.
     * @param {string} id
     * @param {ProductCollection} [productCollection] The updated ProductCollection resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public patchProductCollectionItem(id: string, productCollection?: ProductCollection, options?: any) {
        return ProductCollectionApiFp(this.configuration).patchProductCollectionItem(id, productCollection, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Creates a ProductCollection resource.
     * @param {ProductCollectionjsonld} [productCollectionjsonld] The new ProductCollection resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public postProductCollectionCollection(productCollectionjsonld?: ProductCollectionjsonld, options?: any) {
        return ProductCollectionApiFp(this.configuration).postProductCollectionCollection(productCollectionjsonld, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Replaces the ProductCollection resource.
     * @param {string} id
     * @param {ProductCollectionjsonld} [productCollectionjsonld] The updated ProductCollection resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public putProductCollectionItem(id: string, productCollectionjsonld?: ProductCollectionjsonld, options?: any) {
        return ProductCollectionApiFp(this.configuration).putProductCollectionItem(id, productCollectionjsonld, options)(this.axios, this.basePath);
    }

}


/**
 * ProductLocationApi - axios parameter creator
 * @export
 */
export const ProductLocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Removes the ProductLocation resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductLocationItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProductLocationItem.');
            }
            const localVarPath = `/api/product/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves the collection of ProductLocation resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductLocationCollection(page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/product/locations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves a ProductLocation resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductLocationItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductLocationItem.');
            }
            const localVarPath = `/api/product/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates the ProductLocation resource.
         * @param {string} id
         * @param {ProductLocation} [productLocation] The updated ProductLocation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductLocationItem(id: string, productLocation?: ProductLocation, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchProductLocationItem.');
            }
            const localVarPath = `/api/product/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productLocation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productLocation !== undefined ? productLocation : {}) : (productLocation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a ProductLocation resource.
         * @param {ProductLocationjsonld} [productLocationjsonld] The new ProductLocation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductLocationCollection(productLocationjsonld?: ProductLocationjsonld, options: any = {}): RequestArgs {
            const localVarPath = `/api/product/locations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productLocationjsonld !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productLocationjsonld !== undefined ? productLocationjsonld : {}) : (productLocationjsonld || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replaces the ProductLocation resource.
         * @param {string} id
         * @param {ProductLocationjsonld} [productLocationjsonld] The updated ProductLocation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductLocationItem(id: string, productLocationjsonld?: ProductLocationjsonld, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putProductLocationItem.');
            }
            const localVarPath = `/api/product/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productLocationjsonld !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productLocationjsonld !== undefined ? productLocationjsonld : {}) : (productLocationjsonld || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductLocationApi - functional programming interface
 * @export
 */
export const ProductLocationApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Removes the ProductLocation resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductLocationItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProductLocationApiAxiosParamCreator(configuration).deleteProductLocationItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves the collection of ProductLocation resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductLocationCollection(page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
            const localVarAxiosArgs = ProductLocationApiAxiosParamCreator(configuration).getProductLocationCollection(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves a ProductLocation resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductLocationItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductLocationjsonld> {
            const localVarAxiosArgs = ProductLocationApiAxiosParamCreator(configuration).getProductLocationItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Updates the ProductLocation resource.
         * @param {string} id
         * @param {ProductLocation} [productLocation] The updated ProductLocation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductLocationItem(id: string, productLocation?: ProductLocation, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductLocationjsonld> {
            const localVarAxiosArgs = ProductLocationApiAxiosParamCreator(configuration).patchProductLocationItem(id, productLocation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Creates a ProductLocation resource.
         * @param {ProductLocationjsonld} [productLocationjsonld] The new ProductLocation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductLocationCollection(productLocationjsonld?: ProductLocationjsonld, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductLocationjsonld> {
            const localVarAxiosArgs = ProductLocationApiAxiosParamCreator(configuration).postProductLocationCollection(productLocationjsonld, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Replaces the ProductLocation resource.
         * @param {string} id
         * @param {ProductLocationjsonld} [productLocationjsonld] The updated ProductLocation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductLocationItem(id: string, productLocationjsonld?: ProductLocationjsonld, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductLocationjsonld> {
            const localVarAxiosArgs = ProductLocationApiAxiosParamCreator(configuration).putProductLocationItem(id, productLocationjsonld, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductLocationApi - factory interface
 * @export
 */
export const ProductLocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Removes the ProductLocation resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductLocationItem(id: string, options?: any) {
            return ProductLocationApiFp(configuration).deleteProductLocationItem(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Retrieves the collection of ProductLocation resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductLocationCollection(page?: number, options?: any) {
            return ProductLocationApiFp(configuration).getProductLocationCollection(page, options)(axios, basePath);
        },
        /**
         *
         * @summary Retrieves a ProductLocation resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductLocationItem(id: string, options?: any) {
            return ProductLocationApiFp(configuration).getProductLocationItem(id, options)(axios, basePath);
        },
        /**
         *
         * @summary Updates the ProductLocation resource.
         * @param {string} id
         * @param {ProductLocation} [productLocation] The updated ProductLocation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductLocationItem(id: string, productLocation?: ProductLocation, options?: any) {
            return ProductLocationApiFp(configuration).patchProductLocationItem(id, productLocation, options)(axios, basePath);
        },
        /**
         *
         * @summary Creates a ProductLocation resource.
         * @param {ProductLocationjsonld} [productLocationjsonld] The new ProductLocation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductLocationCollection(productLocationjsonld?: ProductLocationjsonld, options?: any) {
            return ProductLocationApiFp(configuration).postProductLocationCollection(productLocationjsonld, options)(axios, basePath);
        },
        /**
         *
         * @summary Replaces the ProductLocation resource.
         * @param {string} id
         * @param {ProductLocationjsonld} [productLocationjsonld] The updated ProductLocation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductLocationItem(id: string, productLocationjsonld?: ProductLocationjsonld, options?: any) {
            return ProductLocationApiFp(configuration).putProductLocationItem(id, productLocationjsonld, options)(axios, basePath);
        },
    };
};

/**
 * ProductLocationApi - object-oriented interface
 * @export
 * @class ProductLocationApi
 * @extends {BaseAPI}
 */
export class ProductLocationApi extends BaseAPI {
    /**
     *
     * @summary Removes the ProductLocation resource.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLocationApi
     */
    public deleteProductLocationItem(id: string, options?: any) {
        return ProductLocationApiFp(this.configuration).deleteProductLocationItem(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Retrieves the collection of ProductLocation resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLocationApi
     */
    public getProductLocationCollection(page?: number, options?: any) {
        return ProductLocationApiFp(this.configuration).getProductLocationCollection(page, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Retrieves a ProductLocation resource.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLocationApi
     */
    public getProductLocationItem(id: string, options?: any) {
        return ProductLocationApiFp(this.configuration).getProductLocationItem(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Updates the ProductLocation resource.
     * @param {string} id
     * @param {ProductLocation} [productLocation] The updated ProductLocation resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLocationApi
     */
    public patchProductLocationItem(id: string, productLocation?: ProductLocation, options?: any) {
        return ProductLocationApiFp(this.configuration).patchProductLocationItem(id, productLocation, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Creates a ProductLocation resource.
     * @param {ProductLocationjsonld} [productLocationjsonld] The new ProductLocation resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLocationApi
     */
    public postProductLocationCollection(productLocationjsonld?: ProductLocationjsonld, options?: any) {
        return ProductLocationApiFp(this.configuration).postProductLocationCollection(productLocationjsonld, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Replaces the ProductLocation resource.
     * @param {string} id
     * @param {ProductLocationjsonld} [productLocationjsonld] The updated ProductLocation resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLocationApi
     */
    public putProductLocationItem(id: string, productLocationjsonld?: ProductLocationjsonld, options?: any) {
        return ProductLocationApiFp(this.configuration).putProductLocationItem(id, productLocationjsonld, options)(this.axios, this.basePath);
    }

}


/**
 * ProductStockApi - axios parameter creator
 * @export
 */
export const ProductStockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Retrieves the collection of ProductStock resources.
         * @param {number} [quantity]
         * @param {Array<number>} [quantity2]
         * @param {string} [location]
         * @param {Array<string>} [location2]
         * @param {string} [product]
         * @param {Array<string>} [product2]
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductStockCollection(quantity?: number, quantity2?: Array<number>, location?: string, location2?: Array<string>, product?: string, product2?: Array<string>, page?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/product/stocks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (quantity2) {
                localVarQueryParameter['quantity[]'] = quantity2;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (location2) {
                localVarQueryParameter['location[]'] = location2;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (product2) {
                localVarQueryParameter['product[]'] = product2;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves a ProductStock resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductStockItem(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductStockItem.');
            }
            const localVarPath = `/api/product/stocks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add specific amount of specific product into stock.
         * @summary Add product into stock.
         * @param {string} id
         * @param {InlineObject1} [inlineObject1]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockAddProductStockItem(id: string, inlineObject1?: InlineObject1, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling stockAddProductStockItem.');
            }
            const localVarPath = `/api/product/stocks/{id}/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {}) : (inlineObject1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Consume specific amount of specific product from stock.
         * @summary Consume product from stock.
         * @param {string} id
         * @param {InlineObject2} [inlineObject2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockConsumeProductStockItem(id: string, inlineObject2?: InlineObject2, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling stockConsumeProductStockItem.');
            }
            const localVarPath = `/api/product/stocks/{id}/consume`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {}) : (inlineObject2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initialize stock for specific product in specific location.
         * @summary Create stock for product and location.
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockInitProductStockCollection(inlineObject?: InlineObject, options: any = {}): RequestArgs {
            const localVarPath = `/api/product/stocks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductStockApi - functional programming interface
 * @export
 */
export const ProductStockApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Retrieves the collection of ProductStock resources.
         * @param {number} [quantity]
         * @param {Array<number>} [quantity2]
         * @param {string} [location]
         * @param {Array<string>} [location2]
         * @param {string} [product]
         * @param {Array<string>} [product2]
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductStockCollection(quantity?: number, quantity2?: Array<number>, location?: string, location2?: Array<string>, product?: string, product2?: Array<string>, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = ProductStockApiAxiosParamCreator(configuration).getProductStockCollection(quantity, quantity2, location, location2, product, product2, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves a ProductStock resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductStockItem(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductStockjsonld> {
            const localVarAxiosArgs = ProductStockApiAxiosParamCreator(configuration).getProductStockItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add specific amount of specific product into stock.
         * @summary Add product into stock.
         * @param {string} id
         * @param {InlineObject1} [inlineObject1]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockAddProductStockItem(id: string, inlineObject1?: InlineObject1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProductStockApiAxiosParamCreator(configuration).stockAddProductStockItem(id, inlineObject1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Consume specific amount of specific product from stock.
         * @summary Consume product from stock.
         * @param {string} id
         * @param {InlineObject2} [inlineObject2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockConsumeProductStockItem(id: string, inlineObject2?: InlineObject2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProductStockApiAxiosParamCreator(configuration).stockConsumeProductStockItem(id, inlineObject2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Initialize stock for specific product in specific location.
         * @summary Create stock for product and location.
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockInitProductStockCollection(inlineObject?: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductStockjsonld> {
            const localVarAxiosArgs = ProductStockApiAxiosParamCreator(configuration).stockInitProductStockCollection(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductStockApi - factory interface
 * @export
 */
export const ProductStockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Retrieves the collection of ProductStock resources.
         * @param {number} [quantity]
         * @param {Array<number>} [quantity2]
         * @param {string} [location]
         * @param {Array<string>} [location2]
         * @param {string} [product]
         * @param {Array<string>} [product2]
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductStockCollection(quantity?: number, quantity2?: Array<number>, location?: string, location2?: Array<string>, product?: string, product2?: Array<string>, page?: number, options?: any) {
            return ProductStockApiFp(configuration).getProductStockCollection(quantity, quantity2, location, location2, product, product2, page, options)(axios, basePath);
        },
        /**
         *
         * @summary Retrieves a ProductStock resource.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductStockItem(id: string, options?: any) {
            return ProductStockApiFp(configuration).getProductStockItem(id, options)(axios, basePath);
        },
        /**
         * Add specific amount of specific product into stock.
         * @summary Add product into stock.
         * @param {string} id
         * @param {InlineObject1} [inlineObject1]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockAddProductStockItem(id: string, inlineObject1?: InlineObject1, options?: any) {
            return ProductStockApiFp(configuration).stockAddProductStockItem(id, inlineObject1, options)(axios, basePath);
        },
        /**
         * Consume specific amount of specific product from stock.
         * @summary Consume product from stock.
         * @param {string} id
         * @param {InlineObject2} [inlineObject2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockConsumeProductStockItem(id: string, inlineObject2?: InlineObject2, options?: any) {
            return ProductStockApiFp(configuration).stockConsumeProductStockItem(id, inlineObject2, options)(axios, basePath);
        },
        /**
         * Initialize stock for specific product in specific location.
         * @summary Create stock for product and location.
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockInitProductStockCollection(inlineObject?: InlineObject, options?: any) {
            return ProductStockApiFp(configuration).stockInitProductStockCollection(inlineObject, options)(axios, basePath);
        },
    };
};

/**
 * ProductStockApi - object-oriented interface
 * @export
 * @class ProductStockApi
 * @extends {BaseAPI}
 */
export class ProductStockApi extends BaseAPI {
    /**
     *
     * @summary Retrieves the collection of ProductStock resources.
     * @param {number} [quantity]
     * @param {Array<number>} [quantity2]
     * @param {string} [location]
     * @param {Array<string>} [location2]
     * @param {string} [product]
     * @param {Array<string>} [product2]
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductStockApi
     */
    public getProductStockCollection(quantity?: number, quantity2?: Array<number>, location?: string, location2?: Array<string>, product?: string, product2?: Array<string>, page?: number, options?: any) {
        return ProductStockApiFp(this.configuration).getProductStockCollection(quantity, quantity2, location, location2, product, product2, page, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Retrieves a ProductStock resource.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductStockApi
     */
    public getProductStockItem(id: string, options?: any) {
        return ProductStockApiFp(this.configuration).getProductStockItem(id, options)(this.axios, this.basePath);
    }

    /**
     * Add specific amount of specific product into stock.
     * @summary Add product into stock.
     * @param {string} id
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductStockApi
     */
    public stockAddProductStockItem(id: string, inlineObject1?: InlineObject1, options?: any) {
        return ProductStockApiFp(this.configuration).stockAddProductStockItem(id, inlineObject1, options)(this.axios, this.basePath);
    }

    /**
     * Consume specific amount of specific product from stock.
     * @summary Consume product from stock.
     * @param {string} id
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductStockApi
     */
    public stockConsumeProductStockItem(id: string, inlineObject2?: InlineObject2, options?: any) {
        return ProductStockApiFp(this.configuration).stockConsumeProductStockItem(id, inlineObject2, options)(this.axios, this.basePath);
    }

    /**
     * Initialize stock for specific product in specific location.
     * @summary Create stock for product and location.
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductStockApi
     */
    public stockInitProductStockCollection(inlineObject?: InlineObject, options?: any) {
        return ProductStockApiFp(this.configuration).stockInitProductStockCollection(inlineObject, options)(this.axios, this.basePath);
    }

}


